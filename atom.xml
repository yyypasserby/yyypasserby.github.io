<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LearnByPractice</title>
  
  <subtitle>Practice makes Perfect</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yyypasserby.github.io/"/>
  <updated>2018-07-21T23:42:00.767Z</updated>
  <id>https://yyypasserby.github.io/</id>
  
  <author>
    <name>Yiyun Yao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Go Learning Notes</title>
    <link href="https://yyypasserby.github.io/2017/06/09/go-learning-notes/"/>
    <id>https://yyypasserby.github.io/2017/06/09/go-learning-notes/</id>
    <published>2017-06-10T06:09:33.000Z</published>
    <updated>2018-07-21T23:42:00.767Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h2><pre><code class="go">func compute(fn func(float64, float64) float64) float64 {    return fn(3, 4)}func main() {    hypot := func(x, y float64) float64 {        return math.Sqrt(x*x + y*y)    }    fmt.Println(hypot(5, 12))    fmt.Println(compute(hypot))}func adder() func(int) int {    sum := 0    return func(x int) int {        sum += x        return sum    }}pos, neg = adder(), adder()pos(2) // sum = 2neg(-2) // sum = -2</code></pre><ol><li>Types come after variables names</li><li>Only capitalized name will be exported</li><li>Consecutive variables with same type can share<br><code>x int, y int</code> -&gt; <code>x, y int</code></li><li>Functions can return multiple string using <code>(int, int)</code></li><li>Return variables can be named and used in the functions (must use parenthesis) <code>func Func(x int) (y int)</code></li><li>Naked return (using return statement without arguments in a function with return values) will return the named return variables. Not recommended in long functions.</li><li>Functions can also be passed as values</li><li>Functions have closures which can access variables outside itself, and different functions have different closures.</li></ol><h2 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h2><ol><li>Variables can have initializer through <code>=</code>, if given, type can be omitted</li><li><code>:=</code> is a short assignment, which can be used where <code>var</code> and type omitted</li><li><code>fmt.Printf(&quot;Type: %T Value: %v\n&quot;, z, z)</code></li><li><code>const</code> variable has very high precision.</li></ol><h2 id="Packages"><a href="#Packages" class="headerlink" title="Packages"></a>Packages</h2><ol><li>Import name is the last word of the package</li><li>You should make all the import names unique, if it is not, using like <code>othername &quot;path/to/conflictname&quot;</code></li></ol><h2 id="Control-Flow"><a href="#Control-Flow" class="headerlink" title="Control Flow"></a>Control Flow</h2><ol><li>In <code>if</code> and <code>for</code>, <code>{}</code> is always required, <code>()</code> is always not needed</li><li>No <code>while</code>, only <code>for $condition {}</code></li><li>Like <code>for</code>, <code>if</code> and <code>switch</code> can have a short statement, and the variables declared can only be used until the end of <code>if</code> or <code>else</code></li><li>No need to break in <code>switch</code>, it will stop when hits</li><li><code>switch</code> with no condition is equivalent to <code>switch true</code></li><li><code>defer</code> defers the execution of a function until the surrounding function returns, but only the function call, the arguments are evaluated immediately</li><li>Multiple <code>defer</code>s goes into a stack, when function returns, it will pop out in a LIFO order</li></ol><h2 id="Pointers"><a href="#Pointers" class="headerlink" title="Pointers"></a>Pointers</h2><ol><li>No pointer arithmetic</li><li>Pointer to a struct: <code>p.X = 1</code> instead of <code>(*p).X = 1</code></li></ol><h2 id="Types"><a href="#Types" class="headerlink" title="Types"></a>Types</h2><pre><code class="go">type Vertex struct {    X, Y float64}v := Vertex{3, 4}// v: = Vertex{X: 1} // Y: 0 is implicitp := &amp;Vertex{3, 4}func (v Vertex) Abs() float64 {    return math.Sqrt(v.X*v.X + v.Y*v.Y)}func (v *Vertex) Scale(f float64) {    v.X = v.X * f    v.Y = v.Y * f}v.Scale(10) // v.X = 30, v.Y = 40v.Abs() // 50</code></pre><ol><li>Go doesn’t have classes, but types with methods</li><li>Methods is just functions with a receiver</li><li>Methods can declared on non-struct type, like <code>type Myfloat float64</code></li><li>You can just declare methods with a receiver whose type is defined in the same pacakage as the method</li><li>Methods’ receiver can also be pointers, and only methods with pointer receivers can modify the value to which the receiver points.</li><li>Methods with pointer receivers can accept both pointers and values</li><li>In the inverse direction, methods with value receivers can also accept both pointers and values(Remember both can’t modify the field in that type)</li></ol><h2 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h2><pre><code class="go">type I interface {    M()}type T struct {    S string}// This method means type T implements the interface I,// but we don&#39;t need to explicitly declare that it does so.func (t T) M() {    fmt.Println(t.S)}func do(i interface{}) {    switch v := i.(type) {    case int:        fmt.Printf(&quot;Twice %v is %v\n&quot;, v, v*2)    case string:        fmt.Printf(&quot;%q is %v bytes long\n&quot;, v, len(v))    default:        fmt.Printf(&quot;I don&#39;t know about type %T!\n&quot;, v)    }}func main() {    var a I = T{&quot;hello&quot;}    a.M()    var i interface{} = &quot;hello&quot;    s := i.(string)    fmt.Println(s)    s, ok := i.(string)    fmt.Println(s, ok)    f, ok := i.(float64)    fmt.Println(f, ok)    f = i.(float64) // panic    fmt.Println(f)    // error code    inte, err := strconv.Atoi(&quot;42&quot;)    if err != nil {            fmt.Printf(&quot;couldn&#39;t convert number: %v\n&quot;, err)            return    }    fmt.Println(&quot;Converted integer:&quot;, inte)    // reader    r := strings.NewReader(&quot;Hello, Reader!&quot;)    b := make([]byte, 8)    for {        n, err := r.Read(b)        fmt.Printf(&quot;n = %v err = %v b = %v\n&quot;, n, err, b)        fmt.Printf(&quot;b[:n] = %q\n&quot;, b[:n])        if err == io.EOF {            break        }    }}</code></pre><ol><li>A interface method is defined as a set of method signature, and can hold any value that implements those methods</li><li>If the concrete value inside an interface is <code>nil</code>, the receiver in the method will be <code>nil</code></li><li>Interface with zero methods are called empty interface, which are used to handle values of unknown types</li><li>A <code>Stringer</code> is a type that can describe itself as a string. The <code>fmt</code> package look for this interface to print values</li><li>Functions often return <code>error</code> value, and calling code should handle errors by testing whether the error equals <code>nil</code></li></ol><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><pre><code class="go">var a [10]int // [n]T is an array of n values of T, and it will give you ten 0svar s []int = a[1:5] // []T is a slice of an arrayvar as []int = a[1:] // a[5:]ma := make([]int, 0. 5) // len(ma)=0, cap(ma)=5// Create a tic-tac-toe board.board := [][]string{    []string{&quot;_&quot;, &quot;_&quot;, &quot;_&quot;},    []string{&quot;_&quot;, &quot;_&quot;, &quot;_&quot;},    []string{&quot;_&quot;, &quot;_&quot;, &quot;_&quot;},}// The players take turns.board[0][0] = &quot;X&quot;board[2][2] = &quot;O&quot;board[1][2] = &quot;X&quot;board[1][0] = &quot;O&quot;board[0][2] = &quot;X&quot;append(as, 1, 2, 3) // add {1, 2, 3} to slice as</code></pre><ol><li>Slices are like references to arrays</li><li>Slices can’t exist individually, if you build a slice, you build an array and create a slice referenced to it</li><li>Slices have both length <code>len(s)</code> and capacity <code>cap(s)</code>. If you change the back, the capacity will always maintain; but if you change the front the capacity will decrease, but anytime slices can’t exceed the capacity which means you can re-slice it</li><li>If a slice reference to no array, it has 0 in both length and capacity, and also it equals to <code>nil</code></li><li><code>range</code> returns index and value for array in <code>for</code> and value can be dropped by not declaring it</li></ol><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><pre><code class="go">var m = map[string]string {    &quot;Debug&quot;: &quot;sucks&quot;,    &quot;Test&quot; : &quot;rocks&quot;,}v, ok := m[&quot;Test&quot;] // v = &quot;rocks&quot;, ok = Truev, ok = m[&quot;Deploy&quot;] // v = &quot;&quot;, ok = Falsem[&quot;Deploy&quot;] = &quot;rocks&quot;delete(m, &quot;Deploy&quot;)func WordCount(s string) map[string]int {    ret := map[string]int {}    fields := strings.Fields(s)    for _, field := range fields {        v, ok := ret[field]        if ok == true {            ret[field] = v + 1        } else {            ret[field] = 1        }    }    return ret}</code></pre><h2 id="Goroutines"><a href="#Goroutines" class="headerlink" title="Goroutines"></a>Goroutines</h2><pre><code class="go">go f(x, y, z)ch &lt;- v // Send v to channel ch.v := &lt;-ch // Receive from ch, and assign value to v.ch := make(chan int, 1)// close and rangefunc fibonacci(n int, c chan int) {    x, y := 0, 1    for i := 0; i &lt; n; i++ {        c &lt;- x        x, y = y, x+y    }    close(c)}func main() {    c := make(chan int, 10)    go fibonacci(cap(c), c)    for i := range c {        fmt.Println(i)    }}// selectfunc fibonacci(c, quit chan int) {    x, y := 0, 1    for {        select {        case c &lt;- x:            x, y = y, x+y        case &lt;-quit:            fmt.Println(&quot;quit&quot;)            return        }    }}func main() {    c := make(chan int)    quit := make(chan int)    go func() {        for i := 0; i &lt; 10; i++ {            fmt.Println(&lt;-c)        }        quit &lt;- 0    }()    fibonacci(c, quit)}// SafeCounter is safe to use concurrently.type SafeCounter struct {    v   map[string]int    mux sync.Mutex}// Inc increments the counter for the given key.func (c *SafeCounter) Inc(key string) {    c.mux.Lock()    // Lock so only one goroutine at a time can access the map c.v.    c.v[key]++    c.mux.Unlock()}// Value returns the current value of the counter for the given key.func (c *SafeCounter) Value(key string) int {    c.mux.Lock()    // Lock so only one goroutine at a time can access the map c.v.    defer c.mux.Unlock()    return c.v[key]}</code></pre><ol><li><code>goroutine</code> is a lightweight thread managed by the Go routine, <code>go func(x)</code></li><li>Channels are a typed conduit through which you can send and receive values with the channel operator, <code>&lt;-</code></li><li>Like Maps and slices, channels must be created before use, <code>ch := make(chan int)</code></li><li>By default, sends and receives block until the other side is ready. This allows gorountines to synchronize without explicit locks or condition variables</li><li>A sender can <code>close(ch)</code> a channel to indicate that no more value will be sent. And the receivers can use the second parameter to test whether the channel has been closed, <code>v, ok := &lt;-ch</code></li><li>The loop, <code>for x := range ch {}</code> for the channel will repeat until it is closed.</li><li>In <code>select</code>, <code>default</code> means non-blocking</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Functions&quot;&gt;&lt;a href=&quot;#Functions&quot; class=&quot;headerlink&quot; title=&quot;Functions&quot;&gt;&lt;/a&gt;Functions&lt;/h2&gt;&lt;pre&gt;&lt;code class=&quot;go&quot;&gt;func compute(fn func(fl
      
    
    </summary>
    
      <category term="practice" scheme="https://yyypasserby.github.io/categories/practice/"/>
    
    
      <category term="golang" scheme="https://yyypasserby.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>My Setup</title>
    <link href="https://yyypasserby.github.io/2017/05/31/my-setup/"/>
    <id>https://yyypasserby.github.io/2017/05/31/my-setup/</id>
    <published>2017-05-31T18:22:33.000Z</published>
    <updated>2018-07-22T00:08:53.123Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Oh-My-Zsh"><a href="#Oh-My-Zsh" class="headerlink" title="Oh My Zsh"></a>Oh My Zsh</h2><p><a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">https://github.com/robbyrussell/oh-my-zsh</a></p><h3 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h3><pre><code class="sh">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;brew install autojump</code></pre><h5 id="Installation-Permission-Problem"><a href="#Installation-Permission-Problem" class="headerlink" title="Installation Permission Problem"></a>Installation Permission Problem</h5><p>(Github)[<a href="https://github.com/Homebrew/brew/issues/3228]" target="_blank" rel="noopener">https://github.com/Homebrew/brew/issues/3228]</a></p><h3 id="Configure"><a href="#Configure" class="headerlink" title="Configure"></a>Configure</h3><p>Add following lines to <code>.zshrc</code></p><pre><code class="sh">plugins=(git cpp autojump osx)[[ -s ~/.autojump/etc/profile.d/autojump.sh ]] &amp;&amp; . ~/.autojump/etc/profile.d/autojump.shif [[ &quot;$TERM_PROGRAM&quot; == &quot;nuclide&quot; ]]; then  export EDITOR=&#39;atom --wait&#39;else  export EDITOR=vim # your favorite editor herefi</code></pre><h4 id="zsh-autosuggestions"><a href="#zsh-autosuggestions" class="headerlink" title="zsh-autosuggestions"></a><a href="https://github.com/zsh-users/zsh-autosuggestions" target="_blank" rel="noopener">zsh-autosuggestions</a></h4><pre><code class="sh">git clone git://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions</code></pre><p>Add following lines to <code>.zshrc</code></p><pre><code class="sh">plugins=(zsh-autosuggestions)</code></pre><h2 id="Oh-My-Tmux"><a href="#Oh-My-Tmux" class="headerlink" title="Oh My Tmux"></a>Oh My Tmux</h2><p><a href="https://github.com/gpakosz/.tmux" target="_blank" rel="noopener">https://github.com/gpakosz/.tmux</a></p><h3 id="Install-1"><a href="#Install-1" class="headerlink" title="Install"></a>Install</h3><pre><code class="sh">cdgit clone https://github.com/gpakosz/.tmux.gitln -s -f .tmux/.tmux.confcp .tmux/.tmux.conf.local .tmux source-file ~/.tmux.conf</code></pre><pre><code>tls=&#39;tmux ls&#39;tat=&#39;tmux attach -t&#39;trn=&#39;tmux rename&#39;</code></pre><h2 id="spf13-vim"><a href="#spf13-vim" class="headerlink" title="spf13-vim"></a>spf13-vim</h2><p><a href="https://github.com/spf13/spf13-vim" target="_blank" rel="noopener">https://github.com/spf13/spf13-vim</a></p><h3 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h3><pre><code class="sh">curl https://j.mp/spf13-vim3 -L &gt; spf13-vim.sh &amp;&amp; sh spf13-vim.sh</code></pre><h3 id="Install-2"><a href="#Install-2" class="headerlink" title="Install"></a>Install</h3><p>Open vim and run</p><pre><code class="vim">:PluginInstall</code></pre><h3 id="Configure-1"><a href="#Configure-1" class="headerlink" title="Configure"></a>Configure</h3><p>Modify <code>.vimrc.bundles</code></p><pre><code class="vim">let g:spf13_bundle_groups=[&#39;general&#39;, &#39;writing&#39;, &#39;youcompleteme&#39;, &#39;programming&#39;, &#39;python&#39;, &#39;javascript&#39;, &#39;html&#39;, &#39;misc&#39;,]</code></pre><p>Install YouCompleteMe (cpp &amp; javascript)</p><pre><code class="sh">cd ~/.vim/bundle/YouCompleteMe./install.py --clang-completer./install.py --tern-completer</code></pre><p>Add settings for YouCompleteMe in <code>.vimrc.local</code></p><pre><code class="vim">let g:ycm_global_ycm_extra_conf = &quot;~/.vim/.ycm_extra_conf.py&quot;let g:ycm_confirm_extra_conf = 0let g:ycm_seed_identifiers_with_syntax = 1let g:ycm_collect_identifiers_from_tag_files = 1let g:ycm_min_num_of_chars_for_completion = 1set completeopt=longest,menu</code></pre><p>Get <code>.ycm_extra_conf.py</code></p><pre><code class="sh">cdwget https://raw.githubusercontent.com/Valloric/ycmd/master/cpp/ycm/.ycm_extra_conf.py</code></pre><p>Add the path under <code>include &lt;...&gt;</code> to the <code>.ycm_extra_conf.py</code> with <code>-isystem</code></p><pre><code class="sh">echo | clang -v -E -x c++ -</code></pre><p>Open vim and restart YcmServer</p><pre><code class="vim">:YcmRestartServer</code></pre><h4 id="optional-Add-google-vim-codefmt"><a href="#optional-Add-google-vim-codefmt" class="headerlink" title="[optional] Add google/vim-codefmt"></a>[optional] Add <a href="https://github.com/google/vim-codefmt" target="_blank" rel="noopener">google/vim-codefmt</a></h4><p>Add plugins to <code>.vimrc.bundles.local</code> and run <code>:PluginInstall</code></p><pre><code class="vim">Plugin &#39;google/vim-maktaba&#39;Plugin &#39;google/vim-codefmt&#39;Plugin &#39;google/vim-glaive&#39;</code></pre><p>Add settings to <code>.vimrc.local</code></p><pre><code class="vim">call glaive#Install()Glaive codefmt plugin[mappings]Glaive codefmt google_java_executable=&quot;java -jar /path/to/google-java-format-VERSION-all-deps.jar&quot;Glaive codefmt clang_format_style=&quot;google&quot;augroup autoformat_settings  autocmd FileType bzl AutoFormatBuffer buildifier  autocmd FileType c,cpp,proto,javascript AutoFormatBuffer clang-format  autocmd FileType dart AutoFormatBuffer dartfmt  autocmd FileType go AutoFormatBuffer gofmt  autocmd FileType gn AutoFormatBuffer gn  autocmd FileType html,css,json AutoFormatBuffer js-beautify  autocmd FileType java AutoFormatBuffer google-java-format  autocmd FileType python AutoFormatBuffer yapf  &quot; Alternative: autocmd FileType python AutoFormatBuffer autopep8augroup END&quot; vim-javascriptautocmd Filetype javascript setlocal ts=2 sts=2 sw=2</code></pre><p>Unbind existing key mapping of <code>&lt;Leader&gt;=</code> in <code>.vimrc</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Oh-My-Zsh&quot;&gt;&lt;a href=&quot;#Oh-My-Zsh&quot; class=&quot;headerlink&quot; title=&quot;Oh My Zsh&quot;&gt;&lt;/a&gt;Oh My Zsh&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/robbyrussell/o
      
    
    </summary>
    
      <category term="setup" scheme="https://yyypasserby.github.io/categories/setup/"/>
    
    
      <category term="zsh" scheme="https://yyypasserby.github.io/tags/zsh/"/>
    
      <category term="tmux" scheme="https://yyypasserby.github.io/tags/tmux/"/>
    
      <category term="vim" scheme="https://yyypasserby.github.io/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>Practices and Skills from NPM to Angular</title>
    <link href="https://yyypasserby.github.io/2015/06/03/npm-yo-grunt-bower-angular/"/>
    <id>https://yyypasserby.github.io/2015/06/03/npm-yo-grunt-bower-angular/</id>
    <published>2015-06-03T18:22:33.000Z</published>
    <updated>2018-07-22T00:10:24.981Z</updated>
    
    <content type="html"><![CDATA[<p>Recently, I am refactorying some of my projects. It may be more proper to say that the projects were rewritten because I have update the technical solutions that is much cooler.</p><p>In this blog, I am going to talk about some obstacles I met in building an <a href="https://angularjs.org/" target="_blank" rel="noopener">Angular</a> App and how I solve them. This will not contain real coding technics in how to write an app, but some useful tools or components that may help to write Angular more comfortably and conveniently.</p><p>Ok, let’s just begin with how to design the project structure of Angular.</p><p>Angular can be used in many ways, it provides a lot of useful functions and directives for you to build a web application, which also means Angular is somewhat heavier than other framework. It mainly solves some key problems in the web front-end development, like modules, customizing tags and etc., and assembles all these solutions into a big framework. Consequently, you can use Angular to render your web page and use controllers to bind your data, just like the old ways, or you may define your own directives and services to build an web app in a new way. If you are the second-way supporter, I’m going to talk about a good way to structure your apps.</p><p>The main tools we will use next: npm, yo, grunt, bower, angular-generator.</p><h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><p><a href="https://github.com/npm/npm" target="_blank" rel="noopener">npm</a> is an amazing tool for you if your project is related to <code>Javascript</code>. With the development of <code>Javascript</code>, npm is also becoming more widely used in development. But this time, it is just a tool installer, we will just use it to prepare the tool for our app.</p><pre><code class="bash">npm install -g grunt-cli bower yo generator-karma generator-angular</code></pre><p><code>-g</code> means that you are going to install these package in a global scope. You can also remove this option, however, I really recommend you to add it because these are all tools which we will use next, even in the future when you need to build an Angular App and they will not contaminate the namespace between the projects.</p><p>If you decide to install it in a global scope, it is helpful to customize the directory to store the global resources.</p><pre><code class="bash">npm set config prefix path/to/your/directory/[node-global]npm set config cache path/to/your/directory/[node-cache]</code></pre><p><code>[]</code> means you can do in that way to organize your npm global directory and I think it is elegant. You could also find the configuration file <code>~/.npmrc</code> and define these in it.</p><p>The installation process may be very slow in China. You could use an <a href="http://npm.taobao.org/" target="_blank" rel="noopener">npm mirror</a> maintained by Taobao to improve the speed.</p><pre><code class="bash">registry=https://registry.npm.taobao.org/</code></pre><h2 id="yo-amp-generator-karma-amp-generator-angular"><a href="#yo-amp-generator-karma-amp-generator-angular" class="headerlink" title="yo &amp; generator-karma &amp; generator-angular"></a>yo &amp; generator-karma &amp; generator-angular</h2><p><a href="http://yeoman.io/" target="_blank" rel="noopener">Yeoman</a> is a tool to give you an easy way to build a basic structure for the application. It predefines some kinds of structure of a particular app. <a href="https://github.com/yeoman/generator-karma" target="_blank" rel="noopener">generator-karma</a> and <a href="https://github.com/yeoman/generator-angular" target="_blank" rel="noopener">generator-angular</a> are those predefined structures and they are also need to be installed.</p><p><a href="http://karma-runner.github.io/0.12/index.html" target="_blank" rel="noopener">Karma</a> is a JS unit-test framework. You can define some test in the karma.conf.js and run <code>karma start karma.conf.js</code> to make a automatic test for your app. It is especiallly useful when your project is based on some big frameworks like Angular, because it can test every small module you define like a directve, a filter or a controller, and you can integrate your web app continuously and errorlessly. Also it can be registered in a <strong>grunt task</strong> which can be executed automatically once you want to commit a version.</p><p>These two generator not only create a directory structure for each of their frameworks. It also defines what needs to be involved in this project. </p><p>Let’s use Angular as an example. When you finishes installing the yo and angular-generator, you can now set out to build an Angular App.</p><pre><code class="bash">mkdir angular-appcd angular-appyo angular</code></pre><p>After, you can set some setting to your angular project. Yo will automactically download the dependencies by <code>bower</code> and inject them in your project using wiredep by <code>grunt</code>. Also some framework like <code>karma</code> mentioned above will be installed.</p><p>yo &amp; angular-generator also do other awesomethings. It will organize the project even you are going to add something to it, like if you are going to add an filter to this app.</p><pre><code class="bash">yo angular:filter your_filter_name</code></pre><p>Yo will create a directory in your <code>scripts</code> directory and create a file named <code>your_filter_name.js</code> in it. This filter will also be inject into your <code>index.html</code> automatically using <code>wiredep</code>. You have to pay attention to your filter name, <code>-</code> based and customized prefix is recommended. For example,</p><pre><code class="bash">yo angular:directive my-quiz-directive</code></pre><p>A <code>my-quiz-directive.js</code> file will be created and a <code>myQuizDirective</code> directive will be added to Angular. So <code>my-quiz-directive</code> can be used in html like <code>&lt;my-quiz-directive&gt;&lt;/my-quiz-directive&gt;</code> or other Angular recommended ways.</p><h2 id="bower"><a href="#bower" class="headerlink" title="bower"></a>bower</h2><p>There is not much to talk about <a href="http://bower.io/" target="_blank" rel="noopener">bower</a>. It is first introduced in this <a href="{filename}/2014-12-18-django-and-bower.md">blog</a>. In the Angular app generated by yo, only one thing need to be carefully maintained, <code>bower.json</code>. If you want to use the <code>wiredep</code> to automate your project dependency, every time your installed a library or a framework by bower, you must use <code>--save</code> option to update the <code>bower.json</code> file, and the grunt will watch the change of <code>bower.json</code> and inject all the dependency in it to the <code>index.html</code></p><h2 id="grunt"><a href="#grunt" class="headerlink" title="grunt"></a>grunt</h2><p><a href="http://gruntjs.com/" target="_blank" rel="noopener">grunt</a> is an automator in web front-end development.</p><h3 id="Why-we-need-an-automator"><a href="#Why-we-need-an-automator" class="headerlink" title="Why we need an automator?"></a>Why we need an automator?</h3><p>After several years of exploration in web dev, engineers find many best practices in web front-end dev, including some effort to do with performance and some with engineering. And all these tasks like test, wiredep, cssmin, htmlmin, uglify, all can be done automatically. So we just need a way to define how it works and then let a program does it for us.</p><p>grunt is that kind of thing. Also <a href="http://gulpjs.com/" target="_blank" rel="noopener">gulp</a> can do the same thing, but lighter.</p><p>You can define the tasks in <code>Gruntfile.js</code>, most of the tasks you need is already predefined in grunt, so you just need to call them by name.</p><p>Talking about our app, the basic tasks generated automactically by yo are following in my space:</p><ul><li>clean</li><li>wiredep</li><li>useminPrepare</li><li>concurrent</li><li>autoprefixer</li><li>concat</li><li>ngAnnotate</li><li>copy</li><li>cdnify</li><li>cssmin</li><li>uglify</li><li>filerev</li><li>usemin</li><li>htmlmin</li><li>karma</li><li>jshint</li><li>watch</li></ul><p>You can reorganize these module into tasks and call them.</p><pre><code class="bash">grunt task_name</code></pre><p>Several changes I made to the default <code>Gruntfile.js</code>:</p><h4 id="Add-ignore-symbols-to-jshint"><a href="#Add-ignore-symbols-to-jshint" class="headerlink" title="Add ignore symbols to jshint"></a>Add ignore symbols to jshint</h4><p><a href="http://jshint.com/" target="_blank" rel="noopener">jshint</a> is to check the correctness of your js code. However, you may find some warnings when you run jshint, this may abort the whole grunt tasks if you do not add <code>--force</code> options. You can modify <code>.jshintrc</code> file in the current project directory and add your symbols ignored by the jshint.</p><pre><code class="json">{    &quot;globals&quot;: {        &quot;angular&quot;: false,        &quot;$&quot;: false    }}</code></pre><p>This means <code>angular</code> and <code>$</code> symbols will be ignored when checking the js syntax.</p><h4 id="Add-css-dependent-resources-copied"><a href="#Add-css-dependent-resources-copied" class="headerlink" title="Add css-dependent resources copied"></a>Add css-dependent resources copied</h4><p>When you use some front-end framework like <a href="http://getbootstrap.com/" target="_blank" rel="noopener">bootstrap</a>, you may encounter some problems like web page cannot locate the image resources. That is because in the production environment the theme will be copied, only css and js. So you must modify the gruntfile.</p><p>This action is provided by the <code>copy</code> module in <code>grunt</code>.</p><pre><code class="json">{    expand: true,    dot: true,    cwd: &#39;path/to/your/cwd&#39;,    dest: &#39;path/to/your/dest&#39;,    src: [&#39;paths/to/your/src&#39;]}</code></pre><p>You can add above structure to the <code>copy:dist:files</code> in <code>Gruntfile.js</code>, add the all the srcs your defined in <code>path/to/your/cwd/paths/to/your/src</code> will be copied to <code>path/to/your/dest/paths/to/your/src</code>.</p><h4 id="Remove-dynamic-image-path-from-Filerev"><a href="#Remove-dynamic-image-path-from-Filerev" class="headerlink" title="Remove dynamic image path from Filerev"></a>Remove dynamic image path from Filerev</h4><p>Filerev is to renames files for browser caching purposes. However, if you have some image path is dynamically rendered by the attribute defined by user, it should be excluded.</p><p>This function is provided by <code>filerev</code> module in grunt.</p><pre><code class="json">filerev: {    dist: {    src: [        &#39;&lt;%= yeoman.dist %&gt;/scripts/{,*/}*.js&#39;,        &#39;&lt;%= yeoman.dist %&gt;/styles/{,*/}*.css&#39;,        &#39;&lt;%= yeoman.dist %&gt;/images/{,*/}*.{png,jpg,jpeg,gif,webp,svg}&#39;,        &#39;&lt;%= yeoman.dist %&gt;/styles/fonts/*&#39;    ]    }}</code></pre><p>You need to remove the src from it or redefine the static resources path for browser caching purposes.</p><h4 id="Test-modification"><a href="#Test-modification" class="headerlink" title="Test modification"></a>Test modification</h4><p>If you use the yo way to create directives, your test case is also generated in the <code>test</code> directory. Consequently, you should write your own test cases, not <code>awesomeThings</code> any more. :-)</p><p>Also some modules which need not to be tested should be remove in <code>karma.conf.js</code>.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>With all the tools, to me, I feel like I have a commandline-based IDE. Also if you preferred a GUI-way to develop, you can choose many other <strong>real</strong> IDE, like <a href="https://www.jetbrains.com/webstorm/" target="_blank" rel="noopener">Webstorm</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Recently, I am refactorying some of my projects. It may be more proper to say that the projects were rewritten because I have update the 
      
    
    </summary>
    
      <category term="web" scheme="https://yyypasserby.github.io/categories/web/"/>
    
      <category term="frontend" scheme="https://yyypasserby.github.io/categories/web/frontend/"/>
    
    
      <category term="bower" scheme="https://yyypasserby.github.io/tags/bower/"/>
    
      <category term="angular" scheme="https://yyypasserby.github.io/tags/angular/"/>
    
      <category term="npm" scheme="https://yyypasserby.github.io/tags/npm/"/>
    
      <category term="yeoman" scheme="https://yyypasserby.github.io/tags/yeoman/"/>
    
      <category term="grunt" scheme="https://yyypasserby.github.io/tags/grunt/"/>
    
  </entry>
  
  <entry>
    <title>Online Answer System for SEU History Competition</title>
    <link href="https://yyypasserby.github.io/2015/05/30/project-seu-history-angular/"/>
    <id>https://yyypasserby.github.io/2015/05/30/project-seu-history-angular/</id>
    <published>2015-05-30T18:22:33.000Z</published>
    <updated>2018-07-20T21:36:39.927Z</updated>
    
    <content type="html"><![CDATA[<ul><li>SEU-History-Angular: <a href="http://seu-history.github.io/SEU-History-Angular" target="_blank" rel="noopener">http://seu-history.github.io/SEU-History-Angular</a></li><li>Github: <a href="https://github.com/SEU-History/SEU-History-Angular" target="_blank" rel="noopener">SEU-History/SEU-History-Angular</a></li></ul><p><img src="/images/project-seu-history-angular/index.png" alt="Seu History"><br><img src="/images/project-seu-history-angular/answer-sheet.png" alt="Seu History Answer Sheets"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;SEU-History-Angular: &lt;a href=&quot;http://seu-history.github.io/SEU-History-Angular&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://seu-history.g
      
    
    </summary>
    
      <category term="project" scheme="https://yyypasserby.github.io/categories/project/"/>
    
    
      <category term="angular" scheme="https://yyypasserby.github.io/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>MinHeap-Optimized Dijkstra</title>
    <link href="https://yyypasserby.github.io/2015/04/05/minheap-optimized-dijkstra/"/>
    <id>https://yyypasserby.github.io/2015/04/05/minheap-optimized-dijkstra/</id>
    <published>2015-04-05T18:22:33.000Z</published>
    <updated>2018-07-20T21:36:39.926Z</updated>
    
    <content type="html"><![CDATA[<p>In Microsoft campus recuitment contest, there is a problem which could use <a href="http://en.wikipedia.org/wiki/Dijkstra&#39;s_algorithm" target="_blank" rel="noopener">Dijkstra shortest path algorithm</a> to solve. And I write a version whose time complexity is <strong>O(n2)</strong> in the contest, however, that makes me feel not very good. So I decide to have a good review of some basic algorithms.</p><h2 id="The-simple-version-of-Dijkstra"><a href="#The-simple-version-of-Dijkstra" class="headerlink" title="The simple version of Dijkstra"></a>The simple version of Dijkstra</h2><p>Dijkstra shortest path algorithms is the fastest single point shortest pathfinding algorithms so far. And it is very easy to program. The basic pseudo code is as follows.</p><pre><code class="python">Node S = the Start nodeSet M = the set contains those nodes have already find the shortest path to SSet N = the set contains those nodes have not find the shortest path to S yetArray d = the current shortest path to SFunction w(x, y) = return the distance between x and yfor each i in d:    d(i) = infinited(S) = 0for N is not empty:    v = Extract_min(N)    for each node i in N:        if d(i) &gt; d(v) + w(v, i):            d(i) = d(v) + w(v, i)    add v to M</code></pre><p>So basic idea of Dijsktra is that we must find the current min value to the origin <strong>S</strong> and gradually update the value of distance from other nodes to the origin <strong>S</strong>. Actually, we find the only point that could be optimized is the function <code>Extract_min</code>. So the problem comes to how to extract a min value from an array.</p><p>In a very common style of thinking, we will consider the algorithm like this.</p><pre><code class="python">function Extract_min(d):    v, min = infinite    for each i in d:        if d(i) &lt; min:            min = d(i)            v = i    return i</code></pre><p>This algorithm use the time complexity of <strong>O(n)</strong> to find a min value, is not so acceptable if the number of nodes is large. In fact, we really know a way to optimize this operation, that is a <strong>heap</strong>.</p><p>Heap is a kind of data structure that can get the min/max element of a set of things. The time complexity of pop/push an element is <strong>O(logn)</strong> is a good optimization compare to the sequential compare. In <strong>C++</strong>, there are also some useful functions to implement the operations.</p><p>In <strong>C++</strong>, there is no a practical data structure named <strong>heap</strong>, like <code>vector</code>, <code>set</code> or <code>unordered_map</code>. However, something related to the max heap named priority queue is an <strong>STL</strong> container. So how are the heap implemented? See the following functions.</p><pre><code class="cpp">make_heap(vector&lt;T&gt;::iterator begin, vector&lt;T&gt;::iterator end);push_heap(vector&lt;T&gt;::iterator begin, vector&lt;T&gt;::iterator end);pop_heap(vector&lt;T&gt;::iterator begin, vector&lt;T&gt;::iterator end);</code></pre><p>These three functions is all we need to implement a heap. The three functions also can accept another parameter named <strong>Compare</strong>, which determines two problems, max or min and which attributes are to compare. And this function is very important for us to customized the STL function so that we could use heap to optimize Dijkstra algorithm.</p><h2 id="Minheap-Optimized-Dijkstra"><a href="#Minheap-Optimized-Dijkstra" class="headerlink" title="Minheap-Optimized Dijkstra"></a>Minheap-Optimized Dijkstra</h2><p>Ok, let’s just start to optimized the <code>Extract_min</code> function.</p><p>First, we also need to initialize a <strong>vector</strong>, which contains the distance of every nodes from the origin S.</p><pre><code class="cpp">vector&lt;pair&lt;int, int&gt;&gt; d;d.resize(node_size + 1, make_pair(0, INT_MAX));int cnt = 0;for(auto &amp;kv : d) {    k.first = ++cnt;}d[begin].second = 0;</code></pre><p>We use the index to represent the nodes index in the graph which begins from 1. And the first node extracted from the node set must be the origin <strong>S</strong> itself. So we change the value of <strong>S</strong> in <strong>d</strong> to <strong>ZERO</strong>.</p><p>Second, we need a loop to find if there are still things in the <strong>Set N</strong>, and also to <code>Extract_min</code> from the set of number.</p><pre><code class="cpp">while(!d.empty()) {    make_heap(d.begin(), d.end(), dijkstra_min_heap);    pop_heap(d.begin(), d.end(), dijkstra_min_heap);    ...}</code></pre><p>These two key statements are to optimized the <code>Extract_min</code> function, the <code>pop_heap</code> function will put the min or max element to the end of the vector, so we just need to get the element from the vector’s back. And <code>dijkstra_min_heap</code> is just as follow.</p><pre><code class="cpp">bool dijkstra_min_heap(const pii &amp;a, const pii &amp;b) {    return a.second &gt; b.second;}</code></pre><p>So, when we use the <strong>STL</strong>, it is easy for us to implement some algorithms fast and accurate.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In Microsoft campus recuitment contest, there is a problem which could use &lt;a href=&quot;http://en.wikipedia.org/wiki/Dijkstra&amp;#39;s_algorithm
      
    
    </summary>
    
      <category term="practice" scheme="https://yyypasserby.github.io/categories/practice/"/>
    
    
      <category term="algorithm" scheme="https://yyypasserby.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Online Bookshop</title>
    <link href="https://yyypasserby.github.io/2015/03/17/project-online-bookshop/"/>
    <id>https://yyypasserby.github.io/2015/03/17/project-online-bookshop/</id>
    <published>2015-03-17T18:22:33.000Z</published>
    <updated>2018-07-20T21:36:39.927Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Online Bookshop: <a href="https://online-bookshop.herokuapp.com/" target="_blank" rel="noopener">https://online-bookshop.herokuapp.com/</a></li><li>Github: <a href="https://github.com/yyypasserby/OnlineBookshop" target="_blank" rel="noopener">yyypasserby/OnlineBookshop</a></li></ul><p><img src="/images/project-online-bookshop/index.png" alt="Online Bookshop"></p><p><img src="/images/project-online-bookshop/accounts.png" alt="Online Bookshop Accounts"></p><p><img src="/images/project-online-bookshop/comments.png" alt="Online Bookshop Comments"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;Online Bookshop: &lt;a href=&quot;https://online-bookshop.herokuapp.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://online-bookshop.herokuapp.
      
    
    </summary>
    
      <category term="project" scheme="https://yyypasserby.github.io/categories/project/"/>
    
    
      <category term="django" scheme="https://yyypasserby.github.io/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>Compiler Lab</title>
    <link href="https://yyypasserby.github.io/2015/03/17/project-compiler-lab/"/>
    <id>https://yyypasserby.github.io/2015/03/17/project-compiler-lab/</id>
    <published>2015-03-17T18:22:33.000Z</published>
    <updated>2018-07-20T21:36:39.927Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Compiler-lab: <a href="http://compiler-lab.herokuapp.com/" target="_blank" rel="noopener">http://compiler-lab.herokuapp.com/</a></li><li>Github: <a href="https://github.com/yyypasserby/lexical_analysis_visualization" target="_blank" rel="noopener">yyypasserby/lexical_analysis_visualization</a></li></ul><p><img src="/images/project-compiler-lab/index.png" alt="Compiler Lab"></p><p><img src="/images/project-compiler-lab/charts.png" alt="Compiler Lab Charts"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;Compiler-lab: &lt;a href=&quot;http://compiler-lab.herokuapp.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://compiler-lab.herokuapp.com/&lt;/a&gt;&lt;/l
      
    
    </summary>
    
      <category term="project" scheme="https://yyypasserby.github.io/categories/project/"/>
    
    
      <category term="compiler" scheme="https://yyypasserby.github.io/tags/compiler/"/>
    
  </entry>
  
  <entry>
    <title>Deploying Django 1.7 to Heroku</title>
    <link href="https://yyypasserby.github.io/2014/12/21/django-on-heroku/"/>
    <id>https://yyypasserby.github.io/2014/12/21/django-on-heroku/</id>
    <published>2014-12-21T19:22:33.000Z</published>
    <updated>2018-07-21T23:38:28.183Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.djangoproject.com/" target="_blank" rel="noopener">Django 1.7</a> has been long released and its new features of migrations make our web development much easier when dealing with DBs.</p><p><a href="https://www.heroku.com/" target="_blank" rel="noopener">Heroku</a> is a PaaS that managed by <a href="http://www.git-scm.com/" target="_blank" rel="noopener">git</a> and supports Django. If you are a man that don’t want to spend any money on your website like me. I think Heroku is somewhat a good choice for you.</p><p>I used to deploy my website on <a href="https://www.openshift.com/" target="_blank" rel="noopener">Openshift</a> provided by redhat-cloud, however it sometimes was blocked by the GFW. The service of Openshift is great but considering the difficulty of maintainence, I gave up and turn to Heroku.</p><p>But all these PaaS has some several common nature:</p><ul><li><p>need to obey its permission on files, you could not easily customized your web app in some particular ways.</p></li><li><p>need to obey the ways that settings given by the PaaS provider. You should install the local deploy tools to make your web app works find on your localhost. Sometimes if you don’t obey the rules, your app won’t work</p></li><li><p>free service is often with slow reponse and unstablility.</p></li></ul><p>For the reason above, the PaaS service is recommended to deploy some simple and regualr web app with limited functions, such as some frameworks demo, some homework presentation and etc.</p><h2 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h2><p>The setups of Django project is demonstrated in this <a href="{filename}/2014-12-18-django-and-bower.md">blog</a>.</p><p>So after the creation of a project is done. Your project is maybe just like this.</p><pre><code>hellodjango├── hellodjango│   ├── __init__.py│   ├── settings.py│   ├── urls.py│   ├── wsgi.py├── manage.py└── venv</code></pre><p>With the instruction given by the <a href="https://devcenter.heroku.com/articles/getting-started-with-django" target="_blank" rel="noopener">Documentation</a>, we know that the Heroku platform need us to do some extra things to deploy your app.</p><p><strong>First</strong>,  your need to install <a href="https://devcenter.heroku.com/articles/getting-started-with-python#set-up" target="_blank" rel="noopener">Heroku-toolbelt</a>, this contains <code>heroku</code> command to operate and show logs of your project.</p><p><strong>Second</strong>, the default database of Heroku is <strong>Postgresql</strong>, so your need to install <a href="http://postgresapp.com/" target="_blank" rel="noopener">Postgres.app</a> to your computer. I strongly recommend the Mac user to choose the app provided by the official website which could save your a lot of time.</p><p><strong>Thirdly</strong>, especially for Django, you need to install the <a href="https://pypi.python.org/pypi/django-toolbelt/0.0.1" target="_blank" rel="noopener">django-toolbelt</a> to make your website work on Heroku in production state. I found the main thing that django-toolbelt has done is to deal with the static file, like css, js, image and etc. In <a href="https://docs.djangoproject.com/en/1.7/" target="_blank" rel="noopener">documentation</a> of Django, it is not recommended that to use staticfile serve provided by Django for some particular reasons including security. To install django-toolbelt easily, you can type the following command when you are in <strong>virtualenv</strong> mode</p><pre><code class="bash">pip install django-toolbelt</code></pre><p>If you encounter some problems like <code>could not find pg_config executable</code>, that means your Postgresql is not properly configured. You should add the <code>pg_config</code> into your environment variable. It is here if you use the <strong>Postgres.app</strong></p><pre><code>/Applications/Postgres.app/Contents/Versions/9.4/bin</code></pre><h2 id="Configure-Heroku"><a href="#Configure-Heroku" class="headerlink" title="Configure Heroku"></a>Configure Heroku</h2><p>After you have done all these, we can start to configure something required by the Heroku to make your app running on the remote.</p><h3 id="Procfile"><a href="#Procfile" class="headerlink" title="Procfile"></a>Procfile</h3><p>Procfile is used to configure the web container used to run <strong>WSGI</strong> application. The content is like</p><pre><code>web: gunicorn &lt;project_name&gt;.wsgi --log-file -</code></pre><p>Now you can type</p><pre><code class="bash">foreman start</code></pre><p>to check if your app is running well in the local environment.</p><h3 id="requirements-txt"><a href="#requirements-txt" class="headerlink" title="requirements.txt"></a>requirements.txt</h3><p>This file is used for Heroku to install the dependency for your python web app. After you push your file up to the Heroku server, it will execute</p><pre><code class="bash">pip install -r requirements.txt</code></pre><p>to install the dependencies. So what we need to do is</p><pre><code class="bash">pip freeze &gt; requirements.txt</code></pre><h3 id="Django-settings"><a href="#Django-settings" class="headerlink" title="Django settings"></a>Django settings</h3><p>There are also something we need to modify in our Django project.</p><p><strong>settings.py</strong></p><pre><code class="python"># Parse database configuration from $DATABASE_URLimport dj_database_urlDATABASES[&#39;default&#39;] = dj_database_url.config()# Honor the &#39;X-Forwarded-Proto&#39; header for request.is_secure()SECURE_PROXY_SSL_HEADER = (&#39;HTTP_X_FORWARDED_PROTO&#39;, &#39;https&#39;)# Allow all host headersALLOWED_HOSTS = [&#39;*&#39;]# Static asset configurationimport os# Not essential because the settings.py in Django 1.7 has already # provided the definition of BASE_DIR and that seems to be more correct# BASE_DIR = os.path.dirname(os.path.abspath(__file__))STATIC_ROOT = &#39;staticfiles&#39;STATIC_URL = &#39;/static/&#39;STATICFILES_DIRS = (    os.path.join(BASE_DIR, &#39;static&#39;),)</code></pre><p><strong>wsgi.py</strong></p><pre><code class="python">from django.core.wsgi import get_wsgi_applicationfrom dj_static import Clingapplication = Cling(get_wsgi_application())</code></pre><h2 id="Deploy-to-Heroku"><a href="#Deploy-to-Heroku" class="headerlink" title="Deploy to Heroku"></a>Deploy to Heroku</h2><p>Now your file structure is like</p><pre><code>hellodjango├── Procfile├── hellodjango├── manage.py├── requirements.txt└── venv</code></pre><p>We know that Heroku use git to manage the file upload, so the first thing to do is to initiate a git repo and make all the things done committed to the repo.</p><pre><code class="bash">git initgit add .git commit -m&#39;init commit&#39;</code></pre><p>The <code>.gitignore</code> file could contain these several lines.</p><pre><code>venv/*.pycstaticfiles/</code></pre><p>After the repo is set up, we shall create a heroku repo and add its url to our git remote repo. All these operation is encapsulated in one command.</p><pre><code class="bash">heroku create</code></pre><p>If you are the first time to use <strong>heroku-toolbelt</strong>, you had better login first</p><pre><code class="bash">heroku login</code></pre><p>Input your account and password according to the info.</p><p>Then you need to push your repo to the master branch of the remote repo in Heroku.</p><pre><code class="bash">git push heroku master</code></pre><p>Then, after Heroku make a the remote environment set up, you can now visit your website using <code>heroku open</code> and try to rename it using <code>heroku apps:rename &lt;new_app_name&gt;</code>.</p><p>There are also many useful commands to control your website, to see more detailed information, please see the <a href="https://devcenter.heroku.com/articles/getting-started-with-python" target="_blank" rel="noopener">Documentation</a>.</p><h2 id="Suggestion"><a href="#Suggestion" class="headerlink" title="Suggestion"></a>Suggestion</h2><h3 id="Automatically-config-environment"><a href="#Automatically-config-environment" class="headerlink" title="Automatically config environment"></a>Automatically config environment</h3><p>The modification in <strong>settings.py</strong> may make your local debugging not performing right. So I added something more to make the changes just work in the remote.</p><ol><li><p>Create a file naming <code>.env</code>, and type these</p><pre><code>ENV=LOCAL</code></pre></li><li><p>Add one line before the modification and the final content shall be</p><pre><code class="python">if &#39;LOCAL&#39; != os.environ.get(&#39;ENV&#39;, &#39;HEROKU&#39;):# Parse database configuration from $DATABASE_URL import dj_database_url DATABASES[&#39;default&#39;] = dj_database_url.config() ...</code></pre></li><li><p>Config the remote environment variable, type the following command under your app root folder</p><pre><code class="bash">heroku config:set ENV=HEROKU</code></pre></li></ol><p>These operation just add an environment variable to the development env and production env and make the app itself to detect the environment changes.</p><h3 id="Use-the-Django-admin"><a href="#Use-the-Django-admin" class="headerlink" title="Use the Django admin"></a>Use the Django admin</h3><p>As we all know <strong>Django admin</strong> is a very useful module to give the developer a full view of his app. To activate this feature, we should do the following two things.</p><ol><li><p>Configure the static files properly and include the related apps and middlewares in the corresponding settings.</p></li><li><p>Create a superuser of the remote app. Heroku provide us a way to execute instructions to the remote user. Just like,</p><pre><code class="bash">heroku run python manage.py createsuperuser</code></pre><p>Then it will be instruct you to create a superuser interactively like you just do locally.</p><p>You know can visit the <code>&lt;app_url&gt;/admin</code> to operate your remote database happily.</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.djangoproject.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Django 1.7&lt;/a&gt; has been long released and its new features of mig
      
    
    </summary>
    
      <category term="web" scheme="https://yyypasserby.github.io/categories/web/"/>
    
      <category term="backend" scheme="https://yyypasserby.github.io/categories/web/backend/"/>
    
    
      <category term="django" scheme="https://yyypasserby.github.io/tags/django/"/>
    
      <category term="deploy" scheme="https://yyypasserby.github.io/tags/deploy/"/>
    
  </entry>
  
  <entry>
    <title>Practices on Django &amp; Bower</title>
    <link href="https://yyypasserby.github.io/2014/12/18/django-and-bower/"/>
    <id>https://yyypasserby.github.io/2014/12/18/django-and-bower/</id>
    <published>2014-12-18T19:22:33.000Z</published>
    <updated>2018-07-21T23:38:55.745Z</updated>
    
    <content type="html"><![CDATA[<p>As a front-end developer, most of you may know <a href="http://bower.io" target="_blank" rel="noopener">bower</a> these days. Bower is a powerful tools to make your front-end more modular and easy to manage.</p><p>And <a href="https://www.djangoproject.com/" target="_blank" rel="noopener">Django</a> is also very popular in the back-end deveopment. <a href="http://www.douban.com/" target="_blank" rel="noopener">Douban</a>, <a href="http://www.zhihu.com/" target="_blank" rel="noopener">Zhihu</a> all uses Django as their backend framework.</p><p>Today, I am just going to talk about something I concluded from my project in cooperate Django and bower and they really make my website dev much more convenient.</p><h2 id="Virtualenv"><a href="#Virtualenv" class="headerlink" title="Virtualenv"></a>Virtualenv</h2><p>This tool is always used in many python project. Python is undoubtedly a great language with diversity, but it also encounter many problems as its diversity. We may frequently find some package conflicts with each other, that is because the package is design by different people, they won’t communicate with each other until facing conflict. So usually we use the <a href="https://virtualenv.pypa.io/" target="_blank" rel="noopener">virtualenv</a> to avoid these uncompatible problems as much as we can. After you set up your <a href="https://pypi.python.org/pypi/setuptools" target="_blank" rel="noopener">setuptools</a> and <a href="https://pypi.python.org/pypi/pip/" target="_blank" rel="noopener">pip</a>, you can easily get virtualenv by</p><pre><code class="bash">pip install virtualenv</code></pre><p>After installing virtualenv, you can set up a individual virtual environment for your project.</p><pre><code class="bash">virtualenv envsource env/bin/activate</code></pre><p>And all the things you doing after is just change the environment in a virtual way, it won’t conflict with your other packages if they are not in the same environment. To my own point of view, I will start up a brand new environment for a new project even some of its dependency overlaps with my project before. You could also use the same virtual env when doing all your Django project. It’s all up to you.</p><h2 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h2><p>You can install Django in your virtual environment now. </p><pre><code class="bash">pip install django</code></pre><p>The lastest version of Django is 1.7, and its has a great update in 1.7 about the model operation. It has merge the function of <a href="http://south.aeracode.org/" target="_blank" rel="noopener">south</a> project into it and make the modification of the models more convenient. This feature still has some improvements. The process is a little bit different when we build our tables. In the former versions, we do something like following</p><pre><code class="python"># app/models.pyclass Books(models.Model):    name = models.TextFields()# project/settings.pyINSTALLED_APPS = (    ...    &#39;app&#39;,)</code></pre><p>And do these in the command</p><pre><code class="bash">python manage.py syncdb</code></pre><p>And all your models will sync to your databases.<br><strong>But now in 1.7</strong>, we will have something more to do, <strong>instead of the command above.</strong></p><pre><code class="bash">python manage.py makemigrations app</code></pre><p>First we should make the migrations of the app and records them in the <code>migration</code> folder. The structure is just like the following</p><pre><code>migrations├── 0001_initial.py├── 0001_initial.pyc├── __init__.py└── __init__.pyc</code></pre><p>The file produced by this step is to make a image of this version and Django could identify the future changes by comparison with this image.</p><pre><code class="bash">python manage.py migrate app</code></pre><p>The operation is just like the <code>syncdb</code> in the former version. The models are created in the databases.</p><p>If you are using <a href="http://sqlite.org/" target="_blank" rel="noopener">sqlite3</a>, you can use <code>.tables</code> command to show all the tables in your databases.</p><h2 id="Bower"><a href="#Bower" class="headerlink" title="Bower"></a>Bower</h2><p>To my personal custom, in some small projects, I would like to make my utils static files that used in all apps in a folder in the root level. Just like</p><pre><code class="bash">├── db.sqlite3├── app├── manage.py├── static├── template└── project</code></pre><p>This static folder is used to store bower repository for me.</p><pre><code class="bash">cd staticbower init</code></pre><p>Then you can install any front-end framework as you want. To me, these three framework is necessary,</p><pre><code>bower install requirejs --savebower install bootstrap --savebower install jquery --save</code></pre><p>After installed these packages, we could use either <code>&lt;script&gt;</code> ways or <code>rejuirejs</code> ways to include them in our django templates. I’m just going to show you the basic way.</p><p>Django has several ways to deal with static files. <code>STATIC_ROOT</code> and <code>STATICFILES_DIRS</code> are two stantard methods. When we use static file, we must ensure an app is activated in <code>INSTALLED_APPS</code>.</p><pre><code class="python">INSTALLED_APPS = (    &#39;django.contrib.staticfiles&#39;,)</code></pre><p>I prefer to store all my dependency in a global static folder, so I just need to add</p><pre><code class="python"># project/settings.pySTATICFILES_DIRS = (    os.path.join(BASE_DIR, &#39;static&#39;),)</code></pre><pre><code class="html">&lt;!--templates/index.html--&gt;&lt;head&gt;    {% raw %}{% load staticfiles %}{% endraw %}    {% raw %}<link href="{% static " bower_components="" path="" to="" staticfiles"="" %}"="">{% endraw %}&lt;/head&gt;</code></pre><p>Then the engine could find these static files for me.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;As a front-end developer, most of you may know &lt;a href=&quot;http://bower.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;bower&lt;/a&gt; these days. Bower is a 
      
    
    </summary>
    
      <category term="web" scheme="https://yyypasserby.github.io/categories/web/"/>
    
    
      <category term="django" scheme="https://yyypasserby.github.io/tags/django/"/>
    
      <category term="bower" scheme="https://yyypasserby.github.io/tags/bower/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV settings on Mac</title>
    <link href="https://yyypasserby.github.io/2014/11/24/opencv-settings-on-mac/"/>
    <id>https://yyypasserby.github.io/2014/11/24/opencv-settings-on-mac/</id>
    <published>2014-11-24T19:22:33.000Z</published>
    <updated>2018-07-22T00:16:45.895Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Install-homebrew"><a href="#Install-homebrew" class="headerlink" title="Install homebrew"></a>Install homebrew</h2><p>Type the following directions to install <strong>homebrew</strong></p><pre><code class="bash">ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</code></pre><h2 id="Install-OpenCV"><a href="#Install-OpenCV" class="headerlink" title="Install OpenCV"></a>Install OpenCV</h2><p>After installing homebrew, we just need to type the following direction to install <strong>OpenCV</strong></p><pre><code class="bash">brew install opencv</code></pre><p>It will not always works well. There may be kind of mistakes and I just encounter the such in the process. I just could not finish the installation of <strong>libpng</strong>, and I found that it was prevented by the man’s trigger. The file <code>man5</code> has been already allocated by other programs with the permission <strong>admin</strong>, so I used <code>sudo chown $USER man5</code> to solve this problem. And then I went on with the instruction of <code>brew link libpng</code>.</p><p>Here, OpenCV has already been installed.</p><h2 id="Settings-and-make-a-demo"><a href="#Settings-and-make-a-demo" class="headerlink" title="Settings and make a demo"></a>Settings and make a demo</h2><p>Now All the dylibs is in /usr/local/lib, we need add them to our projects.</p><ol><li>New a command line project in Xcode</li><li><p>Select the <strong>Project</strong> and choose <strong>Add Files to …</strong></p><p><img src="/images/opencv-settings-on-mac/addFiles.png" alt="Step 2"></p></li><li><p><code>Command + Shift + G</code> to type the directory of our dylibs as above <code>/usr/local/lib</code>.</p><p><img src="/images/opencv-settings-on-mac/addLibs.png" alt="Step 3"></p></li><li><p>Choose all the dylibs under this directory and click <strong>Add</strong>.</p></li><li><p>Click the settings and choose <strong>Target</strong>, select <strong>All</strong> option on the right side and type <strong>Header Search Path</strong> in the search. Add these two lines in the section.</p><pre><code>/usr/local/include/usr/local/include/opencv</code></pre></li><li><p>Add <code>/usr/local/lib</code> to the <strong>Library Search Path</strong></p></li><li>Try the following code in your <code>main.cpp</code>, see how it works!</li></ol><pre><code class="cc">#include &lt;opencv2/opencv.hpp&gt;#include &lt;opencv2/highgui/highgui.hpp&gt;#include &lt;opencv/cvaux.hpp&gt;using namespace cv;int main(int argc, const char * argv[]){    VideoCapture cap(0);    if(!cap.isOpened()) {        return -1;    }    Mat edges;    namedWindow(&quot;Source&quot;, 1);    for(;;) {        Mat frame;        cap &gt;&gt; frame;        //resize(frame, frame, Size(320, 320));        pyrDown(frame, frame);        cvtColor(frame, frame, CV_BGR2GRAY);        GaussianBlur(frame, frame, Size(7, 7), 1.5, 1.5);        imshow(&quot;Source&quot;, frame);        if(waitKey(30) &gt;= 0)            break;    }    return 0;}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Install-homebrew&quot;&gt;&lt;a href=&quot;#Install-homebrew&quot; class=&quot;headerlink&quot; title=&quot;Install homebrew&quot;&gt;&lt;/a&gt;Install homebrew&lt;/h2&gt;&lt;p&gt;Type the follo
      
    
    </summary>
    
      <category term="setup" scheme="https://yyypasserby.github.io/categories/setup/"/>
    
    
      <category term="opencv" scheme="https://yyypasserby.github.io/tags/opencv/"/>
    
  </entry>
  
</feed>
